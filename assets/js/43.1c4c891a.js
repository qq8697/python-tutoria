(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{406:function(t,r,a){"use strict";a.r(r);var n=a(25),e=Object(n.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"函数式编程概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程概念"}},[t._v("#")]),t._v(" 函数式编程概念")]),t._v(" "),a("h2",{attrs:{id:"番外：编程范式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#番外：编程范式"}},[t._v("#")]),t._v(" 番外：编程范式")]),t._v(" "),a("p",[t._v("编程范式，"),a("strong",[t._v("解构具体问题的方式")]),t._v("。有以下几类：")]),t._v(" "),a("ul",[a("li",[t._v("过程式：一连串告诉计算机怎样处理程序输入的指令，如 C、 Pascal；")]),t._v(" "),a("li",[t._v("声明式：编写一个用来描述待解决问题的说明，并且这个语言的具体实现会指明怎样高效的进行计算，如 SQL。")]),t._v(" "),a("li",[t._v("面向对象：操作一组对象，对象拥有内部状态，并且能够以某种方式支持请求和修改这个内部状态的方法，如 Java 是面向对象的语言，C++ 和 Python 支持面向对象编程，但不强制使用。")]),t._v(" "),a("li",[t._v("函数式：将一个问题分解成一系列函数，理想情况下函数只接受输入并输出结果，不会有影响输出的内部状态，对一个给定的输入，输出是一定的。")])]),t._v(" "),a("p",[t._v("函数式编程可以被认为是面向对象编程的对立面。对象就像是颗小胶囊，包裹着内部状态和随之而来的能让你修改这个内部状态的一组调用方法，以及由正确的状态变化所构成的程序。函数式编程希望尽可能地消除状态变化，只和流经函数的数据打交道。")]),t._v(" "),a("h2",{attrs:{id:"函数式编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程"}},[t._v("#")]),t._v(" 函数式编程")]),t._v(" "),a("p",[t._v("函数式风格反对带有副作用的函数，这些副作用会修改内部状态，或者引起一些无法体现在函数返回值中的变化。完全不产生副作用的函数被称为“纯函数”。（副作用指的是输出在屏幕上或写到磁盘中等并不会返回有用的结果的功能。）"),a("br"),t._v("\n消除副作用意味着不能使用随程序运行而更新的数据结构，每个函数的输出必须只依赖于输入。")]),t._v(" "),a("h2",{attrs:{id:"函数式风格的-python"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数式风格的-python"}},[t._v("#")]),t._v(" 函数式风格的 Python")]),t._v(" "),a("p",[t._v("函数式风格的 Python 并不会极端到消除所有 I/O 或者赋值的程度，相反会提供像函数式一样的接口，但会在内部使用非函数式的特性。（比如，函数的实现仍然会使用局部变量，但不会修改全局变量或者有其他副作用）")]),t._v(" "),a("h2",{attrs:{id:"参考文档"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[t._v("#")]),t._v(" 参考文档")]),t._v(" "),a("ol",[a("li",[t._v("官网 "),a("a",{attrs:{href:"https://docs.python.org/3.5/howto/functional.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("functional"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.defmacro.org/2006/06/19/fp.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Functional Programming"),a("OutboundLink")],1),t._v(" 一个使用 Java 示例的函数式编程的总体介绍。\n"),a("ul",[a("li",[t._v("Higher Order Functions 高阶函数")]),t._v(" "),a("li",[t._v("Currying 柯里化")]),t._v(" "),a("li",[t._v("Lazy Evaluation 惰性求值")]),t._v(" "),a("li",[t._v("Closures 闭包")]),t._v(" "),a("li",[t._v("Continuations 延续")])])]),t._v(" "),a("li",[t._v("阮一峰 "),a("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2017/02/fp-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("函数式编程入门教程"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);r.default=e.exports}}]);