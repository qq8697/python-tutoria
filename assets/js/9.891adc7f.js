(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{356:function(a,s,t){a.exports=t.p+"assets/img/venv.aaf87ad5.png"},382:function(a,s,t){"use strict";t.r(s);var e=t(25),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"虚拟环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#虚拟环境"}},[a._v("#")]),a._v(" 虚拟环境")]),a._v(" "),e("h2",{attrs:{id:"虚拟环境的意义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#虚拟环境的意义"}},[a._v("#")]),a._v(" 虚拟环境的意义")]),a._v(" "),e("p",[a._v("实际开发中会遇到不同的项目对某一模块依赖不同版本的问题，会出现如下的现象：后开发的项目安装了某一模块的新版本，机器上该模块的旧版本被覆盖，导致先开发的项目的该模块版本错误，可能导致该项目运行失败。"),e("br"),a._v("\n所以，需要"),e("strong",[a._v("对不同的项目使用不同的 Python 环境")]),a._v("，虚拟环境即提供这样的能力。")]),a._v(" "),e("h2",{attrs:{id:"安装虚拟环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装虚拟环境"}},[a._v("#")]),a._v(" 安装虚拟环境")]),a._v(" "),e("p",[a._v("虚拟环境的创建使用以下两个第三方模块：")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("virtualenv")])]),a._v(" "),e("li",[e("code",[a._v("virtualenvwrapper")]),a._v(" 虚拟环境扩展包，主要解决单独使用 "),e("code",[a._v("virtualenv")]),a._v(" 时每次在开启虚拟环境前需在虚拟环境所在目录下 "),e("code",[a._v("source <虚拟环境名>/bin/active")]),a._v("，这样需要记住每个虚拟环境所在目录。")])]),a._v(" "),e("ol",[e("li",[e("p",[a._v("安装模块：")]),a._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" pip "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" virtualenv virtualenvwrapper\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])])]),a._v(" "),e("li",[e("p",[a._v("编辑家目录下 .bashrc 文件：")]),a._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" WORKON_HOME "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$HOME")]),a._v("/.virtualenvs\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("source")]),a._v(" /usr/local/bin/virtualenvwrapper.sh\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])])]),a._v(" "),e("li",[e("p",[e("code",[a._v("source .bashrc")]),a._v("。")])])]),a._v(" "),e("h2",{attrs:{id:"创建虚拟环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建虚拟环境"}},[a._v("#")]),a._v(" 创建虚拟环境")]),a._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("mkvirtualenv -p python3 "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("虚拟环境名"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[e("img",{attrs:{src:t(356),alt:""}})]),a._v(" "),e("ol",[e("li",[a._v("创建成功后，会自动工作在这个虚拟环境上（提示符前出现虚拟环境名，如 "),e("code",[a._v("(venv1)")]),a._v("）。")]),a._v(" "),e("li",[e("strong",[a._v("虚拟环境决定了包安装在哪里")]),a._v("，"),e("code",[a._v("cd")]),a._v(" 到 .virtualenvs 目录可以看到已创建的虚拟环境，包在对应的虚拟环境中。")]),a._v(" "),e("li",[a._v("使用 "),e("code",[a._v("deactivate")]),a._v(" 命令退出虚拟环境。")])]),a._v(" "),e("h2",{attrs:{id:"虚拟环境工作流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#虚拟环境工作流"}},[a._v("#")]),a._v(" 虚拟环境工作流")]),a._v(" "),e("ol",[e("li",[a._v("查看所有虚拟环境 "),e("code",[a._v("workon")]),a._v("。（按两次 "),e("code",[a._v("tab")]),a._v(" 提示）")]),a._v(" "),e("li",[a._v("进入虚拟环境 "),e("code",[a._v("workon <虚拟环境名>")]),a._v("。")]),a._v(" "),e("li",[a._v("在该环境下安装依赖包 "),e("code",[a._v("pip install <包名>[==<版本号>]")]),a._v("。")]),a._v(" "),e("li",[a._v("退出虚拟环境 "),e("code",[a._v("deactivate")]),a._v("。")]),a._v(" "),e("li",[a._v("删除虚拟环境 "),e("code",[a._v("rmvirtualenv <虚拟环境名>")]),a._v("。")]),a._v(" "),e("li",[a._v("查看已安装的包 "),e("code",[a._v("pip list")]),a._v("。")])]),a._v(" "),e("h2",{attrs:{id:"番外：虚拟环境安装过程中可能遇到的问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#番外：虚拟环境安装过程中可能遇到的问题"}},[a._v("#")]),a._v(" 番外：虚拟环境安装过程中可能遇到的问题")]),a._v(" "),e("ol",[e("li",[e("p",[e("code",[a._v("source: command not found")]),a._v("\nsource 命令是 bash shell 的内置命令，而 ubuntu 默认用的是 dash，与 bash 的最大不同在于，dash 遵守 POSIX 标准，ubuntu 在启动的时候会运行很多 shell 脚本，使用 dash 可以加快启动速度。解决方案是将 shell 切换回 bash，执行以下命令，并选择 No。")]),a._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" dpkg-reconfigure dash\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])])]),a._v(" "),e("li",[e("p",[e("code",[a._v("/usr/bin/python: No module named virtualenvwrapper")]),a._v("\n我的原因是 "),e("code",[a._v("/usr/bin/python")]),a._v(" 指向了默认安装的 python2，而 "),e("code",[a._v("pip install 模块")]),a._v(" 的时候安装到了 python3 的 site-packages 中。解决方案是将 "),e("code",[a._v("/usr/bin/python")]),a._v(" 指向python3。")]),a._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("cp")]),a._v(" /usr/bin/python /usr/bin/python_bak\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" /usr/bin/python\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -s /usr/bin/python3.5 /usr/bin/python\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br")])]),e("ol",[e("li",[a._v("备份对 python2 的链接；")]),a._v(" "),e("li",[a._v("删除对 python2 的链接；")]),a._v(" "),e("li",[a._v("重新指定新的链接给 python3。")])])])]),a._v(" "),e("h2",{attrs:{id:"番内：venv-模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#番内：venv-模块"}},[a._v("#")]),a._v(" 番内：venv 模块")]),a._v(" "),e("p",[a._v("Python 标准库内置的虚拟环境管理工具，Python 3.3 加入，Python 3.5 开始作为管理虚拟环境的推荐工具，用法 与 virtualenv 类似。")]),a._v(" "),e("h1",{attrs:{id:"参考文档"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[a._v("#")]),a._v(" 参考文档")]),a._v(" "),e("ol",[e("li",[e("a",{attrs:{href:"https://virtualenv.pypa.io/en/latest/",target:"_blank",rel:"noopener noreferrer"}},[a._v("virtualenv"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://pypi.org/project/virtualenvwrapper/",target:"_blank",rel:"noopener noreferrer"}},[a._v("virtualenvwrapper"),e("OutboundLink")],1)]),a._v(" "),e("li",[a._v("官网 "),e("a",{attrs:{href:"https://docs.python.org/3.5/library/venv.html?highlight=venv#module-venv",target:"_blank",rel:"noopener noreferrer"}},[a._v("venv"),e("OutboundLink")],1),a._v(" 模块")])])])}),[],!1,null,null,null);s.default=n.exports}}]);